/*
 * javaGRID - A Grid-Based, Distributed Processing Framework for Embarrassingly Parallel Problems
 *  
 * Submitted as part of a Master's thesis in Advanced Software Engineering
 *
 * Author: Alan Suleiman - alan.suleiman@kcl.ac.uk
 * 
 * August 2015
 */
package javagrid.config;

import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javagrid.common.ExceptionDialogWithPane;
import javagrid.master.MasterMainApp;

/**
 * Configuration helper class, used to load and save job config files, as generated by {@link javagrid.master.MasterMainApp}
 */
public class JobXML {

	private DocumentBuilderFactory dbFactory;
	private DocumentBuilder dBuilder;
	private Document doc;

	private NodeList nList;
	private Node nNode;
	private Element eElement;

	private File jobFile;

	public String id;
	public String mode;

	public String dataSource;
	public String dataFileLocation;
	public String dataFileFormat;
	public String range;
	public String startIndex;
	public String endIndex;

	public String resultDestination;
	public String pulseInterval;

	public String amalgamatedFileLocation;
	public String amalgamatedFileFormat;

	public String algorithm;
	public String granulairty;
	public String taskTimeout;

	public String compressFiles;
	public String compressStreams;


	public JobXML(File input) {
		jobFile = input;
	}

	/**
	 * XML elements schema read from config file in {@link javagrid.master.job} package.
	 * Called from {@link javagrid.master.MasterMainApp}
	 */
	public void readXML() {

		try {
			dbFactory = DocumentBuilderFactory
					.newInstance();
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(jobFile);

			doc.getDocumentElement().normalize();

			nList = doc.getElementsByTagName("job");
			nNode = nList.item(0);
			eElement = (Element) nNode;

			id = eElement
					.getElementsByTagName("id").item(0)
					.getTextContent();

			mode = eElement
					.getElementsByTagName("mode").item(0)
					.getTextContent();

			nList = doc.getElementsByTagName("data");
			nNode = nList.item(0);
			eElement = (Element) nNode;

			dataSource = eElement
					.getElementsByTagName("source").item(0)
					.getTextContent();

			dataFileLocation = eElement
					.getElementsByTagName("location").item(0)
					.getTextContent();

			dataFileFormat = eElement
					.getElementsByTagName("format").item(0)
					.getTextContent();

			range = eElement
					.getElementsByTagName("range").item(0)
					.getTextContent();

			startIndex = eElement
					.getElementsByTagName("startIndex").item(0)
					.getTextContent();

			endIndex = eElement
					.getElementsByTagName("endIndex").item(0)
					.getTextContent();

			nList = doc.getElementsByTagName("worker");
			nNode = nList.item(0);
			eElement = (Element) nNode;

			resultDestination = eElement
					.getElementsByTagName("destination").item(0)
					.getTextContent();

			pulseInterval = eElement
					.getElementsByTagName("pulseInterval").item(0)
					.getTextContent();

			nList = doc.getElementsByTagName("amalgamation");
			nNode = nList.item(0);
			eElement = (Element) nNode;

			amalgamatedFileLocation = eElement
					.getElementsByTagName("location").item(0)
					.getTextContent();

			amalgamatedFileFormat = eElement
					.getElementsByTagName("format").item(0)
					.getTextContent();

			compressFiles = eElement
					.getElementsByTagName("compressFiles").item(0)
					.getTextContent();

			compressStreams = eElement
					.getElementsByTagName("compressStreams").item(0)
					.getTextContent();

			nList = doc.getElementsByTagName("scheduling");
			nNode = nList.item(0);
			eElement = (Element) nNode;

			algorithm = eElement
					.getElementsByTagName("algorithm").item(0)
					.getTextContent();

			granulairty = eElement
					.getElementsByTagName("granularity").item(0)
					.getTextContent();

			taskTimeout = eElement
					.getElementsByTagName("taskTimeout").item(0)
					.getTextContent();


		} catch (Exception ex) {
			ExceptionDialogWithPane edp = new ExceptionDialogWithPane("Error reading job config file!", "JobXML", ex);
			try {
				edp.start(MasterMainApp.getPrimaryStage());
			} catch (Exception ex1) {
				ex1.printStackTrace();
			}
		}
	}



	/**
	 * XML elements schema written to a config file in {@link javagrid.master.job} package.
	 * Called from {@link javagrid.master.MasterMainApp}
	 *
	 * @param jobID see {@link javagrid.common.JobParameters}
	 * @param modeP see {@link javagrid.common.JobParameters}
	 * @param dSource see {@link javagrid.common.JobParameters}
	 * @param location file path of input file
	 * @param format (reserved/deprecated) for alternative file formats
	 * @param range see {@link javagrid.common.JobParameters}.  Equivalent to continuation index
	 * @param sIndex start index
	 * @param eIndex end index
	 * @param resultD see {@link javagrid.common.JobParameters}
	 * @param aLocatoin file path for output amalgamation
	 * @param aFormat (reserved/deprecated) for alternative file formats
	 * @param compFiles reserved/deprecated). See {@link javagrid.common.JobParameters}
	 * @param compStreams See {@link javagrid.common.JobParameters}
	 * @param algorithm See {@link javagrid.common.JobParameters}
	 * @param granularity See {@link javagrid.common.JobParameters}
	 * @param timeout See {@link javagrid.common.JobParameters}
	 * @param pulse See {@link javagrid.common.JobParameters}
	 */
	public void writeXML(String jobID, String modeP, String dSource, String location, String format, boolean range, String sIndex,
			String eIndex, String resultD, String aLocatoin, String aFormat, boolean compFiles, boolean compStreams, String algorithm, String granularity, String timeout,
			String pulse) {

		try {
			dbFactory = DocumentBuilderFactory
					.newInstance();
			dBuilder = dbFactory.newDocumentBuilder();

			// root element
			Document doc = dBuilder.newDocument();
			Element rootElement = doc.createElement("configuration");
			doc.appendChild(rootElement);

			// create a comment with team tag
			Comment eComment = doc
					.createComment("javaGRID job config file");
			doc.insertBefore(eComment, rootElement);

			// job
			Element ejob = doc.createElement("job");
			rootElement.appendChild(ejob);

			Element eid = doc.createElement("id");
			eid.appendChild(doc.createTextNode(jobID));
			ejob.appendChild(eid);

			Element emode = doc.createElement("mode");
			emode.appendChild(doc.createTextNode(modeP));
			ejob.appendChild(emode);

			// data
			Element edata = doc.createElement("data");
			rootElement.appendChild(edata);

			Element esource = doc.createElement("source");
			esource.appendChild(doc.createTextNode(dSource));
			edata.appendChild(esource);

			Element elocation = doc.createElement("location");
			elocation.appendChild(doc.createTextNode(location));
			edata.appendChild(elocation);

			Element eformat = doc.createElement("format");
			eformat.appendChild(doc.createTextNode(format));
			edata.appendChild(eformat);

			Element erange = doc.createElement("range");
			erange.appendChild(doc.createTextNode(String.valueOf(range)));
			edata.appendChild(erange);

			Element estart = doc.createElement("startIndex");
			estart.appendChild(doc.createTextNode(sIndex));
			edata.appendChild(estart);

			Element eend = doc.createElement("endIndex");
			eend.appendChild(doc.createTextNode(eIndex));
			edata.appendChild(eend);

			//worker
			Element eworker = doc.createElement("worker");
			rootElement.appendChild(eworker);

			Element edestination = doc.createElement("destination");
			edestination.appendChild(doc.createTextNode(resultD));
			eworker.appendChild(edestination);

			Element epulse = doc.createElement("pulseInterval");
			epulse.appendChild(doc.createTextNode(pulse));
			eworker.appendChild(epulse);

			//amalgamation
			Element eamalg = doc.createElement("amalgamation");
			rootElement.appendChild(eamalg);

			Element ealocation = doc.createElement("location");
			ealocation.appendChild(doc.createTextNode(aLocatoin));
			eamalg.appendChild(ealocation);

			Element eaformat = doc.createElement("format");
			eaformat.appendChild(doc.createTextNode(aFormat));
			eamalg.appendChild(eaformat);

			Element ecompfiles = doc.createElement("compressFiles");
			ecompfiles.appendChild(doc.createTextNode(String.valueOf(compFiles)));
			eamalg.appendChild(ecompfiles);

			Element ecompstream = doc.createElement("compressStreams");
			ecompstream.appendChild(doc.createTextNode(String.valueOf(compStreams)));
			eamalg.appendChild(ecompstream);

			//schedule
			Element eschedule = doc.createElement("scheduling");
			rootElement.appendChild(eschedule);

			Element ealgorithm = doc.createElement("algorithm");
			ealgorithm.appendChild(doc.createTextNode(algorithm));
			eschedule.appendChild(ealgorithm);

			Element egranularity = doc.createElement("granularity");
			egranularity.appendChild(doc.createTextNode(granularity));
			eschedule.appendChild(egranularity);

			Element etasktimeout = doc.createElement("taskTimeout");
			etasktimeout.appendChild(doc.createTextNode(timeout));
			eschedule.appendChild(etasktimeout);

			TransformerFactory transformerFactory = TransformerFactory
					.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.setOutputProperty(
					"{http://xml.apache.org/xslt}indent-amount", "2");
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(jobFile);
			transformer.transform(source, result);


		} catch (ParserConfigurationException | TransformerException ex) {
			ExceptionDialogWithPane edp = new ExceptionDialogWithPane("Error writing job config file!", "JobXML", ex);
			try {
				edp.start(MasterMainApp.getPrimaryStage());
			} catch (Exception ex1) {
				ex1.printStackTrace();
			}
		}
	}

}
